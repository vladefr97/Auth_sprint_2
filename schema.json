{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "UserLogin": {
      "properties": {
        "login": {
          "default": "JohnDoe",
          "description": "The user's username.",
          "type": "string"
        },
        "password": {
          "default": "Qwerty123",
          "description": "The user's password.",
          "type": "string"
        }
      },
      "required": [
        "login",
        "password"
      ]
    },
    "UserLoginChangeAPI": {
      "properties": {
        "new_login": {
          "default": "JohnDoe",
          "description": "The user's username.",
          "type": "string"
        }
      },
      "required": [
        "new_login"
      ]
    },
    "UserPasswordChangeAPI": {
      "properties": {
        "new_password": {
          "default": "Qwerty123",
          "description": "The user's password.",
          "type": "string"
        }
      },
      "required": [
        "new_password"
      ]
    },
    "UserRegistration": {
      "properties": {
        "login": {
          "default": "JohnDoe",
          "description": "The user's username.",
          "type": "string"
        },
        "password": {
          "default": "Qwerty123",
          "description": "The user's password.",
          "type": "string"
        }
      },
      "required": [
        "login",
        "password"
      ]
    }
  },
  "info": {
    "description": "Sprint 6",
    "title": "Auth service, Team 6",
    "version": "1.0"
  },
  "openapi": "3.0.2",
  "paths": {
    "/api/v1/login": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success user's login",
            "schema": {
              "properties": {
                "access_token": {
                  "type": "string"
                },
                "message": {
                  "description": "Response message",
                  "type": "string"
                },
                "refresh_token": {
                  "description": "Response message",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request response"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds"
          }
        },
        "summary": "Login method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/login/change": {
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserLoginChangeAPI"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success change user's  login"
          },
          "401": {
            "description": "Error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "Change login method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/logout": {
      "post": {
        "responses": {
          "200": {
            "description": "Success user's logout access token"
          },
          "401": {
            "description": "Authorization error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds"
          }
        },
        "summary": "Logout access token method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/password/change": {
      "put": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserPasswordChangeAPI"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success change user's  password"
          },
          "401": {
            "description": "Error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "Change password method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/registration": {
      "post": {
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "That user was created"
          },
          "400": {
            "description": "Bad request response"
          },
          "409": {
            "description": "User already exists"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds"
          }
        },
        "summary": "Registration method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/token/refresh": {
      "post": {
        "responses": {
          "200": {
            "description": "Success user's token refresh"
          },
          "401": {
            "description": "Authorization error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "Refresh token method for users",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/user/history": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "properties": {
                "page": {
                  "default": 1,
                  "description": "page number",
                  "type": "integer"
                }
              }
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "properties": {
                "limit": {
                  "default": 5,
                  "description": "count of rec on the page",
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success user's list of logins"
          },
          "400": {
            "description": "Bad request response"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds"
          }
        },
        "summary": " Return list of user's login history",
        "tags": [
          "auth"
        ]
      }
    },
    "/api/v1/user/{user_id}/role": {
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success delete user's Role"
          },
          "401": {
            "description": "Authorization error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "delete Default Role  from user",
        "tags": [
          "auth"
        ]
      },
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get user's Role"
          },
          "401": {
            "description": "Authorization error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "Get Role method for users",
        "tags": [
          "auth"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success put user's Role"
          },
          "401": {
            "description": "Authorization error response"
          },
          "429": {
            "description": "Too many requests. Limit in interval seconds."
          }
        },
        "summary": "put Role method for users",
        "tags": [
          "auth"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "servers": {
    "url": "api/v1"
  },
  "swagger": "2.0"
}